#!/usr/bin/env python3
"""
Script de prueba completa para TUNRAG
Verifica que todos los componentes funcionen correctamente
"""

import sys
import os
from pathlib import Path

# Agregar src al path
sys.path.append('src/')

def test_imports():
    """Prueba que todos los m√≥dulos se importen correctamente"""
    print("üîç Probando importaciones...")
    
    try:
        # Configuraci√≥n
        from src.config.config import config
        print("‚úÖ Configuraci√≥n importada")
        
        # Servicios principales
        from src.services.pqrs_orchestrator_service import PQRSOrchestratorService
        print("‚úÖ Orquestador de PQRS importado")
        
        from src.services.audio_service import AudioService, AudioServiceFactory
        print("‚úÖ Servicios de audio importados")
        
        from src.services.historico_query_service import HistoricoQueryService
        print("‚úÖ Servicio de hist√≥rico importado")
        
        from src.services.advanced_query_service import AdvancedQueryService
        print("‚úÖ Servicio avanzado importado")
        
        from src.services.pqrs_classifier_service import PQRSClassifierService
        print("‚úÖ Servicio de clasificaci√≥n importado")
        
        from src.services.response_generator_service import ResponseGeneratorService
        print("‚úÖ Servicio de respuestas importado")
        
        # Controladores
        from src.controllers.historico_controller import historico_bp
        print("‚úÖ Controlador hist√≥rico importado")
        
        from src.controllers.advanced_historico_controller import advanced_historico_bp
        print("‚úÖ Controlador avanzado importado")
        
        from src.controllers.pqrs_controller import pqrs_bp
        print("‚úÖ Controlador PQRS importado")
        
        # Repositorios
        from src.repositories.pqrs_repository import PQRSRepository, PromptRepository
        print("‚úÖ Repositorios importados")
        
        # Modelos
        from src.models.pqrs_model import PQRSData, AudioTranscription, PQRSHistorico
        print("‚úÖ Modelos importados")
        
        # Utilidades
        from src.utils.logger import logger
        print("‚úÖ Logger importado")
        
        # ChatBuilder
        from src.ChatBuilder import ChatBuilder, ChatActions
        print("‚úÖ ChatBuilder importado")
        
        # Aplicaci√≥n principal (importar como m√≥dulo)
        import maintenance
        print("‚úÖ Utilidades de mantenimiento importadas")
        
        print("üéâ Todas las importaciones exitosas!")
        return True
        
    except Exception as e:
        print(f"‚ùå Error en importaci√≥n: {e}")
        return False

def test_configuration():
    """Prueba la configuraci√≥n del sistema"""
    print("\nüîß Probando configuraci√≥n...")
    
    try:
        from src.config.config import config
        
        # Validar configuraci√≥n
        config.validate_config()
        print("‚úÖ Configuraci√≥n validada")
        
        # Verificar directorios
        required_dirs = ['input', 'input/audios', 'input/historico', 'input/prompts', 'input/plantillas_solucion']
        for dir_path in required_dirs:
            if Path(dir_path).exists():
                print(f"‚úÖ Directorio {dir_path} existe")
            else:
                print(f"‚ö†Ô∏è  Directorio {dir_path} no existe")
        
        # Verificar archivos de prompts
        for prompt_name, prompt_path in config.PROMPT_FILES.items():
            if prompt_path.exists():
                print(f"‚úÖ Prompt {prompt_name} existe")
            else:
                print(f"‚ö†Ô∏è  Prompt {prompt_name} no existe")
        
        return True
        
    except Exception as e:
        print(f"‚ùå Error en configuraci√≥n: {e}")
        return False

def test_services():
    """Prueba los servicios principales"""
    print("\n‚öôÔ∏è  Probando servicios...")
    
    try:
        from src.services.pqrs_orchestrator_service import PQRSOrchestratorService
        
        # Probar orquestador
        openai_api_key = os.environ.get('OPENAI_API_KEY', 'test-key-for-development')
        orchestrator = PQRSOrchestratorService(openai_api_key)
        print("‚úÖ Orquestador inicializado")
        
        # Probar repositorio
        from src.repositories.pqrs_repository import PQRSRepository
        repository = PQRSRepository()
        historico = repository.get_all_historico()
        print(f"‚úÖ Repositorio cargado: {len(historico) if historico else 0} registros")
        
        # Probar servicio de hist√≥rico
        from src.services.historico_query_service import HistoricoQueryService
        historico_service = HistoricoQueryService(repository)
        stats = historico_service.consultar_estadisticas()
        print("‚úÖ Servicio de hist√≥rico funcionando")
        
        # Probar servicio avanzado
        from src.services.advanced_query_service import AdvancedQueryService
        advanced_service = AdvancedQueryService(repository)
        print("‚úÖ Servicio avanzado funcionando")
        
        return True
        
    except Exception as e:
        print(f"‚ùå Error en servicios: {e}")
        return False

def test_controllers():
    """Prueba los controladores"""
    print("\nüéÆ Probando controladores...")
    
    try:
        from flask import Flask
        
        # Crear app de prueba
        app = Flask(__name__)
        
        # Registrar blueprints
        from src.controllers.historico_controller import historico_bp
        from src.controllers.advanced_historico_controller import advanced_historico_bp
        from src.controllers.pqrs_controller import pqrs_bp
        
        app.register_blueprint(historico_bp, url_prefix='/api/historico')
        app.register_blueprint(advanced_historico_bp, url_prefix='/api/advanced-historico')
        app.register_blueprint(pqrs_bp, url_prefix='/api/pqrs')
        
        print("‚úÖ Todos los blueprints registrados")
        
        # Verificar rutas
        routes = []
        for rule in app.url_map.iter_rules():
            routes.append(f"{rule.methods} {rule.rule}")
        
        print(f"‚úÖ {len(routes)} rutas registradas")
        
        return True
        
    except Exception as e:
        print(f"‚ùå Error en controladores: {e}")
        return False

def test_models():
    """Prueba los modelos de datos"""
    print("\nüìä Probando modelos...")
    
    try:
        from src.models.pqrs_model import PQRSData, AudioTranscription, PQRSHistorico
        
        # Probar creaci√≥n de modelos
        pqrs_data = PQRSData(
            nombre="Juan P√©rez",
            telefono="3001234567",
            cedula="12345678",
            clase="Petici√≥n",
            explicacion="Necesito que reparen un hueco en la calle",
            radicado="2025001",
            entidad_responde="Secretar√≠a de Infraestructura",
            es_faq="No"
        )
        print("‚úÖ PQRSData creado correctamente")
        
        audio_trans = AudioTranscription(
            audio_file="test.wav",
            transcription="Texto de prueba"
        )
        print("‚úÖ AudioTranscription creado correctamente")
        
        return True
        
    except Exception as e:
        print(f"‚ùå Error en modelos: {e}")
        return False

def main():
    """Funci√≥n principal de pruebas"""
    print("üöÄ INICIANDO PRUEBAS COMPLETAS DE TUNRAG")
    print("=" * 50)
    
    tests = [
        ("Importaciones", test_imports),
        ("Configuraci√≥n", test_configuration),
        ("Servicios", test_services),
        ("Controladores", test_controllers),
        ("Modelos", test_models)
    ]
    
    results = []
    for test_name, test_func in tests:
        try:
            result = test_func()
            results.append((test_name, result))
        except Exception as e:
            print(f"‚ùå Error en {test_name}: {e}")
            results.append((test_name, False))
    
    print("\n" + "=" * 50)
    print("üìã RESUMEN DE PRUEBAS")
    print("=" * 50)
    
    passed = 0
    total = len(results)
    
    for test_name, result in results:
        status = "‚úÖ PAS√ì" if result else "‚ùå FALL√ì"
        print(f"{test_name}: {status}")
        if result:
            passed += 1
    
    print(f"\nüéØ RESULTADO: {passed}/{total} pruebas pasaron")
    
    if passed == total:
        print("üéâ ¬°TODAS LAS PRUEBAS PASARON! TUNRAG est√° 100% funcional")
        return True
    else:
        print("‚ö†Ô∏è  Algunas pruebas fallaron. Revisar los errores arriba.")
        return False

if __name__ == "__main__":
    success = main()
    sys.exit(0 if success else 1)
