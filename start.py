#!/usr/bin/env python3
"""
Script de inicio r√°pido para SIFGPT
Permite iniciar la aplicaci√≥n de forma r√°pida y sencilla
"""

import os
import sys
import subprocess
import time
from pathlib import Path

def check_dependencies():
    """Verifica que las dependencias est√©n instaladas"""
    try:
        import flask
        import openai
        import pandas
        import numpy
        print("‚úÖ Todas las dependencias est√°n instaladas")
        return True
    except ImportError as e:
        print(f"‚ùå Dependencia faltante: {e}")
        print("üí° Ejecuta: pip install -r requirements.txt")
        return False

def check_config():
    """Verifica la configuraci√≥n b√°sica"""
    config_files = ['.env', 'env.example']
    env_file = None
    
    for file in config_files:
        if Path(file).exists():
            env_file = file
            break
    
    if env_file:
        print(f"‚úÖ Archivo de configuraci√≥n encontrado: {env_file}")
        return True
    else:
        print("‚ö†Ô∏è  No se encontr√≥ archivo de configuraci√≥n")
        print("üí° Copia env.example como .env y configura tus valores")
        return False

def check_directories():
    """Verifica que existan los directorios necesarios"""
    required_dirs = ['src', 'templates', 'static', 'input', 'logs']
    missing_dirs = []
    
    for dir_name in required_dirs:
        if not Path(dir_name).exists():
            missing_dirs.append(dir_name)
    
    if missing_dirs:
        print(f"‚ùå Directorios faltantes: {', '.join(missing_dirs)}")
        return False
    else:
        print("‚úÖ Todos los directorios necesarios existen")
        return True

def start_application():
    """Inicia la aplicaci√≥n"""
    try:
        print("\nüöÄ Iniciando SIFGPT...")
        
        # Verificar que app.py existe
        if not Path('app.py').exists():
            print("‚ùå app.py no encontrado")
            return False
        
        # Iniciar la aplicaci√≥n
        process = subprocess.Popen([sys.executable, 'app.py'])
        
        print("‚úÖ Aplicaci√≥n iniciada")
        print("üåê Accede a: http://localhost:5000")
        print("‚èπÔ∏è  Presiona Ctrl+C para detener")
        
        try:
            process.wait()
        except KeyboardInterrupt:
            print("\n\nüëã SIFGPT detenido por el usuario")
            process.terminate()
            process.wait()
        
        return True
        
    except Exception as e:
        print(f"‚ùå Error iniciando la aplicaci√≥n: {e}")
        return False

def show_menu():
    """Muestra el men√∫ principal"""
    print("\nüéØ SIFGPT - Sistema de PQRS con Inteligencia Artificial")
    print("=" * 60)
    print("1. Verificar dependencias")
    print("2. Verificar configuraci√≥n")
    print("3. Verificar directorios")
    print("4. Iniciar aplicaci√≥n")
    print("5. Verificar todo y iniciar")
    print("6. Salir")
    print("=" * 60)

def main():
    """Funci√≥n principal"""
    while True:
        show_menu()
        
        try:
            choice = input("\nSelecciona una opci√≥n (1-6): ").strip()
            
            if choice == '1':
                check_dependencies()
                
            elif choice == '2':
                check_config()
                
            elif choice == '3':
                check_directories()
                
            elif choice == '4':
                start_application()
                
            elif choice == '5':
                print("\nüîç Verificando todo...")
                deps_ok = check_dependencies()
                config_ok = check_config()
                dirs_ok = check_directories()
                
                if all([deps_ok, config_ok, dirs_ok]):
                    print("\n‚úÖ Todo est√° listo para iniciar")
                    response = input("\n¬øDeseas iniciar SIFGPT ahora? (s/n): ").lower().strip()
                    if response in ['s', 'si', 's√≠', 'y', 'yes']:
                        start_application()
                else:
                    print("\n‚ùå Hay problemas que resolver antes de iniciar")
                    
            elif choice == '6':
                print("\nüëã ¬°Hasta luego!")
                break
                
            else:
                print("‚ùå Opci√≥n no v√°lida. Selecciona 1-6")
                
        except KeyboardInterrupt:
            print("\n\nüëã ¬°Hasta luego!")
            break
        except Exception as e:
            print(f"‚ùå Error: {e}")
        
        input("\nPresiona Enter para continuar...")

if __name__ == "__main__":
    main()
